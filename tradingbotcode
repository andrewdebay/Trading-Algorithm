{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "run_checker started\n",
      "Trading day\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'fast_ema'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_value\u001b[0;34m(self, series, key)\u001b[0m\n\u001b[1;32m   4735\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4736\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mlibindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_value_box\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4737\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.get_value_box\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.get_value_at\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/util.pxd\u001b[0m in \u001b[0;36mpandas._libs.util.get_value_at\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/util.pxd\u001b[0m in \u001b[0;36mpandas._libs.util.validate_indexer\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: 'str' object cannot be interpreted as an integer",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-215-c9fdabb467e1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     77\u001b[0m \u001b[0mstocks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'BA'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'AAPL'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'DAL'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'SHOP'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 79\u001b[0;31m \u001b[0mrun_checker\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-215-c9fdabb467e1>\u001b[0m in \u001b[0;36mrun_checker\u001b[0;34m(stocklist)\u001b[0m\n\u001b[1;32m     48\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Trading day'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtz\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtz\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m                 \u001b[0msignals\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_signal_bars\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstocklist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'5Min'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0msignal\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msignals\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0msignals\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msignal\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-215-c9fdabb467e1>\u001b[0m in \u001b[0;36mget_signal_bars\u001b[0;34m(symbol_list, rate, ema_slow, ema_fast)\u001b[0m\n\u001b[1;32m     25\u001b[0m     \u001b[0msignals\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msymbol_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'fast_ema'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'slow_ema'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0msignal\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0msignal\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m         \u001b[0msignals\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msignal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1066\u001b[0m         \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1067\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1068\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1069\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1070\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_value\u001b[0;34m(self, series, key)\u001b[0m\n\u001b[1;32m   4742\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4743\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4744\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0me1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4745\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pragma: no cover\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4746\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0me1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_value\u001b[0;34m(self, series, key)\u001b[0m\n\u001b[1;32m   4728\u001b[0m         \u001b[0mk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_convert_scalar_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"getitem\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4729\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4730\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtz\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseries\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"tz\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4731\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4732\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mholds_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_boolean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_value\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_value\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'fast_ema'"
     ]
    }
   ],
   "source": [
    "import alpaca_trade_api as tradeapi\n",
    "import time\n",
    "import datetime\n",
    "from datetime import timedelta\n",
    "from pytz import timezone\n",
    "tz = timezone('US/Eastern')\n",
    "\n",
    "api = tradeapi.REST('PK94G80P5NN2UUXUUU4P',\n",
    "                    '3GZD6BvehMdzq035j2Ght7XRPCHca5rgAP73cgXC','https://paper-api.alpaca.markets')\n",
    "\n",
    "import logging\n",
    "logging.basicConfig(filename='./new_5min_ema.log', format='%(name)s - %(levelname)s - %(message)s')\n",
    "logging.warning('{} logging started'.format(datetime.datetime.now().strftime(\"%x %X\")))\n",
    "\n",
    "def get_data_bars(symbols, rate, slow, fast):\n",
    "    #smoothing_factor = 2/(1+fast)\n",
    "    data = api.get_barset(symbols, rate, limit=20).df\n",
    "    for x in symbols:\n",
    "        data.loc[:, (s, 'fast_sma')] = data[s]['close'].rolling(window=fast).mean()\n",
    "        data.loc[:, (x, 'slow_sma')] = data[x]['close'].rolling(window=slow).mean()\n",
    "    return data\n",
    "\n",
    "def get_signal_bars(symbol_list, rate, ema_slow, ema_fast):\n",
    "    data = get_data_bars(symbol_list, rate, ema_slow, ema_fast)\n",
    "    signals = {}\n",
    "    for x in symbol_list:\n",
    "        if data[x].iloc[-1]['fast_ema'] > data[x].iloc[-1]['slow_ema']: signal = 1\n",
    "        else: signal = 0\n",
    "        signals[x] = signal\n",
    "    return signals\n",
    "\n",
    "def time_to_open(current_time):\n",
    "    if current_time.weekday() <= 4:\n",
    "        d = (current_time + timedelta(days=1)).date()\n",
    "    else:\n",
    "        days_to_mon = 0 - current_time.weekday() + 7\n",
    "        d = (current_time + timedelta(days=days_to_mon)).date()\n",
    "    next_day = datetime.datetime.combine(d, datetime.time(9, 30, tzinfo=tz))\n",
    "    seconds = (next_day - current_time).total_seconds()\n",
    "    return seconds\n",
    "\n",
    "def run_checker(stocklist):\n",
    "    print('run_checker started')\n",
    "    while True:\n",
    "        # Check if Monday-Friday\n",
    "        if datetime.datetime.now(tz).weekday() >= 0 and datetime.datetime.now(tz).weekday() <= 4:\n",
    "            # Checks market is open\n",
    "            print('Trading day')\n",
    "            if datetime.datetime.now(tz).time() > datetime.time(9, 30) and datetime.datetime.now(tz).time() <= datetime.time(15, 30):\n",
    "                signals = get_signal_bars(stocklist, '5Min', 20, 5)\n",
    "                for signal in signals:\n",
    "                    if signals[signal] == 1:\n",
    "                        #if signal not in [x.symbol for x in api.list_positions()]:\n",
    "                        logging.warning('{} {} - {}'.format(datetime.datetime.now(tz).strftime(\"%x %X\"), signal, signals[signal]))\n",
    "                        api.submit_order(signal, 1, 'buy', 'market', 'day')\n",
    "                        print(datetime.datetime.now(tz).strftime(\"%x %X\"), 'buying', signals[signal], signal)\n",
    "                    else:\n",
    "                        try:\n",
    "                            api.submit_order(signal, 1, 'sell', 'market', 'day')\n",
    "                            logging.warning('{} {} - {}'.format(datetime.datetime.now(tz).strftime(\"%x %X\"), signal, signals[signal]))\n",
    "                        except Exception as e:\n",
    "                            print('No sell', signal, e)\n",
    "                            pass\n",
    "\n",
    "                time.sleep(60)\n",
    "            else:\n",
    "                # Get time amount until open, sleep that amount\n",
    "                print('Market closed ({})'.format(datetime.datetime.now(tz)))\n",
    "                print('Sleeping', round(time_to_open(datetime.datetime.now(tz))/60/60, 2), 'hours')\n",
    "                time.sleep(time_to_open(datetime.datetime.now(tz)))\n",
    "        else:\n",
    "            # If not trading day, find out how much until open, sleep that amount\n",
    "            print('Market closed ({})'.format(datetime.datetime.now(tz)))\n",
    "            print('Sleeping', round(time_to_open(datetime.datetime.now(tz))/60/60, 2), 'hours')\n",
    "            time.sleep(time_to_open(datetime.datetime.now(tz)))\n",
    "\n",
    "stocks = ['BA','AAPL','DAL','SHOP']\n",
    "\n",
    "run_checker(stocks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging\n",
    "logging.basicConfig(filename='./new_5min_ema.log', format='%(name)s - %(levelname)s - %(message)s')\n",
    "logging.warning('{} logging started'.format(datetime.datetime.now().strftime(\"%x %X\")))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">AAPL</th>\n",
       "      <th colspan=\"5\" halign=\"left\">BA</th>\n",
       "      <th colspan=\"5\" halign=\"left\">DAL</th>\n",
       "      <th colspan=\"5\" halign=\"left\">SHOP</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:30:00-04:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.860</td>\n",
       "      <td>21.880</td>\n",
       "      <td>21.730</td>\n",
       "      <td>21.740</td>\n",
       "      <td>12592.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:35:00-04:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.740</td>\n",
       "      <td>21.800</td>\n",
       "      <td>21.720</td>\n",
       "      <td>21.760</td>\n",
       "      <td>7573.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:40:00-04:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.760</td>\n",
       "      <td>21.770</td>\n",
       "      <td>21.610</td>\n",
       "      <td>21.640</td>\n",
       "      <td>23125.0</td>\n",
       "      <td>727.125</td>\n",
       "      <td>728.365</td>\n",
       "      <td>727.125</td>\n",
       "      <td>728.30</td>\n",
       "      <td>772.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:45:00-04:00</td>\n",
       "      <td>303.51</td>\n",
       "      <td>303.665</td>\n",
       "      <td>303.260</td>\n",
       "      <td>303.665</td>\n",
       "      <td>8856.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.635</td>\n",
       "      <td>21.640</td>\n",
       "      <td>21.535</td>\n",
       "      <td>21.580</td>\n",
       "      <td>16329.0</td>\n",
       "      <td>728.740</td>\n",
       "      <td>728.740</td>\n",
       "      <td>727.620</td>\n",
       "      <td>727.62</td>\n",
       "      <td>1402.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:50:00-04:00</td>\n",
       "      <td>303.66</td>\n",
       "      <td>303.680</td>\n",
       "      <td>303.375</td>\n",
       "      <td>303.640</td>\n",
       "      <td>6606.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.580</td>\n",
       "      <td>21.605</td>\n",
       "      <td>21.480</td>\n",
       "      <td>21.580</td>\n",
       "      <td>17998.0</td>\n",
       "      <td>727.920</td>\n",
       "      <td>727.920</td>\n",
       "      <td>727.920</td>\n",
       "      <td>727.92</td>\n",
       "      <td>202.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 15:40:00-04:00</td>\n",
       "      <td>309.95</td>\n",
       "      <td>310.230</td>\n",
       "      <td>309.950</td>\n",
       "      <td>310.010</td>\n",
       "      <td>18924.0</td>\n",
       "      <td>133.91</td>\n",
       "      <td>133.970</td>\n",
       "      <td>133.425</td>\n",
       "      <td>133.730</td>\n",
       "      <td>4648.0</td>\n",
       "      <td>22.670</td>\n",
       "      <td>22.705</td>\n",
       "      <td>22.655</td>\n",
       "      <td>22.690</td>\n",
       "      <td>20198.0</td>\n",
       "      <td>711.590</td>\n",
       "      <td>712.460</td>\n",
       "      <td>711.590</td>\n",
       "      <td>712.07</td>\n",
       "      <td>4522.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 15:45:00-04:00</td>\n",
       "      <td>310.00</td>\n",
       "      <td>310.120</td>\n",
       "      <td>309.790</td>\n",
       "      <td>309.930</td>\n",
       "      <td>15705.0</td>\n",
       "      <td>133.65</td>\n",
       "      <td>133.705</td>\n",
       "      <td>133.520</td>\n",
       "      <td>133.620</td>\n",
       "      <td>5341.0</td>\n",
       "      <td>22.700</td>\n",
       "      <td>22.700</td>\n",
       "      <td>22.660</td>\n",
       "      <td>22.685</td>\n",
       "      <td>31394.0</td>\n",
       "      <td>711.810</td>\n",
       "      <td>714.060</td>\n",
       "      <td>711.510</td>\n",
       "      <td>713.72</td>\n",
       "      <td>7490.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 15:50:00-04:00</td>\n",
       "      <td>309.97</td>\n",
       "      <td>310.180</td>\n",
       "      <td>309.610</td>\n",
       "      <td>310.140</td>\n",
       "      <td>39375.0</td>\n",
       "      <td>133.61</td>\n",
       "      <td>133.720</td>\n",
       "      <td>133.300</td>\n",
       "      <td>133.490</td>\n",
       "      <td>15803.0</td>\n",
       "      <td>22.690</td>\n",
       "      <td>22.730</td>\n",
       "      <td>22.650</td>\n",
       "      <td>22.675</td>\n",
       "      <td>51821.0</td>\n",
       "      <td>713.625</td>\n",
       "      <td>713.625</td>\n",
       "      <td>710.805</td>\n",
       "      <td>712.65</td>\n",
       "      <td>10404.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 15:55:00-04:00</td>\n",
       "      <td>310.21</td>\n",
       "      <td>310.240</td>\n",
       "      <td>309.870</td>\n",
       "      <td>310.090</td>\n",
       "      <td>18654.0</td>\n",
       "      <td>133.50</td>\n",
       "      <td>133.555</td>\n",
       "      <td>133.380</td>\n",
       "      <td>133.405</td>\n",
       "      <td>16148.0</td>\n",
       "      <td>22.675</td>\n",
       "      <td>22.740</td>\n",
       "      <td>22.650</td>\n",
       "      <td>22.720</td>\n",
       "      <td>108661.0</td>\n",
       "      <td>712.210</td>\n",
       "      <td>712.210</td>\n",
       "      <td>709.820</td>\n",
       "      <td>709.82</td>\n",
       "      <td>17592.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 16:15:00-04:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>133.26</td>\n",
       "      <td>133.260</td>\n",
       "      <td>133.260</td>\n",
       "      <td>133.260</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>117 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             AAPL                                          BA  \\\n",
       "                             open     high      low    close   volume    open   \n",
       "time                                                                            \n",
       "2020-05-07 14:30:00-04:00     NaN      NaN      NaN      NaN      NaN     NaN   \n",
       "2020-05-07 14:35:00-04:00     NaN      NaN      NaN      NaN      NaN     NaN   \n",
       "2020-05-07 14:40:00-04:00     NaN      NaN      NaN      NaN      NaN     NaN   \n",
       "2020-05-07 14:45:00-04:00  303.51  303.665  303.260  303.665   8856.0     NaN   \n",
       "2020-05-07 14:50:00-04:00  303.66  303.680  303.375  303.640   6606.0     NaN   \n",
       "...                           ...      ...      ...      ...      ...     ...   \n",
       "2020-05-08 15:40:00-04:00  309.95  310.230  309.950  310.010  18924.0  133.91   \n",
       "2020-05-08 15:45:00-04:00  310.00  310.120  309.790  309.930  15705.0  133.65   \n",
       "2020-05-08 15:50:00-04:00  309.97  310.180  309.610  310.140  39375.0  133.61   \n",
       "2020-05-08 15:55:00-04:00  310.21  310.240  309.870  310.090  18654.0  133.50   \n",
       "2020-05-08 16:15:00-04:00     NaN      NaN      NaN      NaN      NaN  133.26   \n",
       "\n",
       "                                                                  DAL          \\\n",
       "                              high      low    close   volume    open    high   \n",
       "time                                                                            \n",
       "2020-05-07 14:30:00-04:00      NaN      NaN      NaN      NaN  21.860  21.880   \n",
       "2020-05-07 14:35:00-04:00      NaN      NaN      NaN      NaN  21.740  21.800   \n",
       "2020-05-07 14:40:00-04:00      NaN      NaN      NaN      NaN  21.760  21.770   \n",
       "2020-05-07 14:45:00-04:00      NaN      NaN      NaN      NaN  21.635  21.640   \n",
       "2020-05-07 14:50:00-04:00      NaN      NaN      NaN      NaN  21.580  21.605   \n",
       "...                            ...      ...      ...      ...     ...     ...   \n",
       "2020-05-08 15:40:00-04:00  133.970  133.425  133.730   4648.0  22.670  22.705   \n",
       "2020-05-08 15:45:00-04:00  133.705  133.520  133.620   5341.0  22.700  22.700   \n",
       "2020-05-08 15:50:00-04:00  133.720  133.300  133.490  15803.0  22.690  22.730   \n",
       "2020-05-08 15:55:00-04:00  133.555  133.380  133.405  16148.0  22.675  22.740   \n",
       "2020-05-08 16:15:00-04:00  133.260  133.260  133.260    100.0     NaN     NaN   \n",
       "\n",
       "                                                        SHOP           \\\n",
       "                              low   close    volume     open     high   \n",
       "time                                                                    \n",
       "2020-05-07 14:30:00-04:00  21.730  21.740   12592.0      NaN      NaN   \n",
       "2020-05-07 14:35:00-04:00  21.720  21.760    7573.0      NaN      NaN   \n",
       "2020-05-07 14:40:00-04:00  21.610  21.640   23125.0  727.125  728.365   \n",
       "2020-05-07 14:45:00-04:00  21.535  21.580   16329.0  728.740  728.740   \n",
       "2020-05-07 14:50:00-04:00  21.480  21.580   17998.0  727.920  727.920   \n",
       "...                           ...     ...       ...      ...      ...   \n",
       "2020-05-08 15:40:00-04:00  22.655  22.690   20198.0  711.590  712.460   \n",
       "2020-05-08 15:45:00-04:00  22.660  22.685   31394.0  711.810  714.060   \n",
       "2020-05-08 15:50:00-04:00  22.650  22.675   51821.0  713.625  713.625   \n",
       "2020-05-08 15:55:00-04:00  22.650  22.720  108661.0  712.210  712.210   \n",
       "2020-05-08 16:15:00-04:00     NaN     NaN       NaN      NaN      NaN   \n",
       "\n",
       "                                                     \n",
       "                               low   close   volume  \n",
       "time                                                 \n",
       "2020-05-07 14:30:00-04:00      NaN     NaN      NaN  \n",
       "2020-05-07 14:35:00-04:00      NaN     NaN      NaN  \n",
       "2020-05-07 14:40:00-04:00  727.125  728.30    772.0  \n",
       "2020-05-07 14:45:00-04:00  727.620  727.62   1402.0  \n",
       "2020-05-07 14:50:00-04:00  727.920  727.92    202.0  \n",
       "...                            ...     ...      ...  \n",
       "2020-05-08 15:40:00-04:00  711.590  712.07   4522.0  \n",
       "2020-05-08 15:45:00-04:00  711.510  713.72   7490.0  \n",
       "2020-05-08 15:50:00-04:00  710.805  712.65  10404.0  \n",
       "2020-05-08 15:55:00-04:00  709.820  709.82  17592.0  \n",
       "2020-05-08 16:15:00-04:00      NaN     NaN      NaN  \n",
       "\n",
       "[117 rows x 20 columns]"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##### stocks = ['AA','AAPL','AIG','AMAT','AMGN','AMZN','BABA','BAC','BBY','BIDU','BP','C','CAT','CMG',]\n",
    "data = api.get_barset(stocks, '5Min', limit= 100).df\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "time\n",
       "2020-05-07 14:30:00-04:00       NaN\n",
       "2020-05-07 14:35:00-04:00       NaN\n",
       "2020-05-07 14:40:00-04:00    728.30\n",
       "2020-05-07 14:45:00-04:00    727.62\n",
       "2020-05-07 14:50:00-04:00    727.92\n",
       "                              ...  \n",
       "2020-05-08 15:40:00-04:00    712.07\n",
       "2020-05-08 15:45:00-04:00    713.72\n",
       "2020-05-08 15:50:00-04:00    712.65\n",
       "2020-05-08 15:55:00-04:00    709.82\n",
       "2020-05-08 16:15:00-04:00       NaN\n",
       "Name: close, Length: 117, dtype: float64"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s = 'SHOP'\n",
    "data[s]['close']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>fast_ma</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:30:00-04:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:35:00-04:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:40:00-04:00</td>\n",
       "      <td>727.125</td>\n",
       "      <td>728.365</td>\n",
       "      <td>727.125</td>\n",
       "      <td>728.30</td>\n",
       "      <td>772.0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:45:00-04:00</td>\n",
       "      <td>728.740</td>\n",
       "      <td>728.740</td>\n",
       "      <td>727.620</td>\n",
       "      <td>727.62</td>\n",
       "      <td>1402.0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:50:00-04:00</td>\n",
       "      <td>727.920</td>\n",
       "      <td>727.920</td>\n",
       "      <td>727.920</td>\n",
       "      <td>727.92</td>\n",
       "      <td>202.0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 15:40:00-04:00</td>\n",
       "      <td>711.590</td>\n",
       "      <td>712.460</td>\n",
       "      <td>711.590</td>\n",
       "      <td>712.07</td>\n",
       "      <td>4522.0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 15:45:00-04:00</td>\n",
       "      <td>711.810</td>\n",
       "      <td>714.060</td>\n",
       "      <td>711.510</td>\n",
       "      <td>713.72</td>\n",
       "      <td>7490.0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 15:50:00-04:00</td>\n",
       "      <td>713.625</td>\n",
       "      <td>713.625</td>\n",
       "      <td>710.805</td>\n",
       "      <td>712.65</td>\n",
       "      <td>10404.0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 15:55:00-04:00</td>\n",
       "      <td>712.210</td>\n",
       "      <td>712.210</td>\n",
       "      <td>709.820</td>\n",
       "      <td>709.82</td>\n",
       "      <td>17592.0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 16:15:00-04:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>117 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              open     high      low   close   volume  fast_ma\n",
       "time                                                                          \n",
       "2020-05-07 14:30:00-04:00      NaN      NaN      NaN     NaN      NaN        1\n",
       "2020-05-07 14:35:00-04:00      NaN      NaN      NaN     NaN      NaN       15\n",
       "2020-05-07 14:40:00-04:00  727.125  728.365  727.125  728.30    772.0       15\n",
       "2020-05-07 14:45:00-04:00  728.740  728.740  727.620  727.62   1402.0       15\n",
       "2020-05-07 14:50:00-04:00  727.920  727.920  727.920  727.92    202.0       15\n",
       "...                            ...      ...      ...     ...      ...      ...\n",
       "2020-05-08 15:40:00-04:00  711.590  712.460  711.590  712.07   4522.0       15\n",
       "2020-05-08 15:45:00-04:00  711.810  714.060  711.510  713.72   7490.0       15\n",
       "2020-05-08 15:50:00-04:00  713.625  713.625  710.805  712.65  10404.0       15\n",
       "2020-05-08 15:55:00-04:00  712.210  712.210  709.820  709.82  17592.0       15\n",
       "2020-05-08 16:15:00-04:00      NaN      NaN      NaN     NaN      NaN       15\n",
       "\n",
       "[117 rows x 6 columns]"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b =data[s]\n",
    "b\n",
    "b.loc[:,'fast_ma'] = 1\n",
    "b.iloc[1:,-1] = 5*3\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"8\" halign=\"left\">SHOP</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>fast_sma</th>\n",
       "      <th>fast_ema</th>\n",
       "      <th>slow_ema</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:40:00-04:00</td>\n",
       "      <td>727.125</td>\n",
       "      <td>728.365</td>\n",
       "      <td>727.125</td>\n",
       "      <td>728.30</td>\n",
       "      <td>772</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:45:00-04:00</td>\n",
       "      <td>728.740</td>\n",
       "      <td>728.740</td>\n",
       "      <td>727.620</td>\n",
       "      <td>727.62</td>\n",
       "      <td>1402</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:50:00-04:00</td>\n",
       "      <td>727.920</td>\n",
       "      <td>727.920</td>\n",
       "      <td>727.920</td>\n",
       "      <td>727.92</td>\n",
       "      <td>202</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-07 14:55:00-04:00</td>\n",
       "      <td>726.285</td>\n",
       "      <td>727.320</td>\n",
       "      <td>726.285</td>\n",
       "      <td>726.77</td>\n",
       "      <td>764</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-07 15:00:00-04:00</td>\n",
       "      <td>726.705</td>\n",
       "      <td>726.705</td>\n",
       "      <td>724.740</td>\n",
       "      <td>725.48</td>\n",
       "      <td>1048</td>\n",
       "      <td>727.218</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 15:35:00-04:00</td>\n",
       "      <td>712.800</td>\n",
       "      <td>712.970</td>\n",
       "      <td>711.190</td>\n",
       "      <td>711.59</td>\n",
       "      <td>4370</td>\n",
       "      <td>712.633</td>\n",
       "      <td>2.0</td>\n",
       "      <td>710.67920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 15:40:00-04:00</td>\n",
       "      <td>711.590</td>\n",
       "      <td>712.460</td>\n",
       "      <td>711.590</td>\n",
       "      <td>712.07</td>\n",
       "      <td>4522</td>\n",
       "      <td>712.591</td>\n",
       "      <td>2.0</td>\n",
       "      <td>710.88570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 15:45:00-04:00</td>\n",
       "      <td>711.810</td>\n",
       "      <td>714.060</td>\n",
       "      <td>711.510</td>\n",
       "      <td>713.72</td>\n",
       "      <td>7490</td>\n",
       "      <td>712.750</td>\n",
       "      <td>2.0</td>\n",
       "      <td>711.18045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 15:50:00-04:00</td>\n",
       "      <td>713.625</td>\n",
       "      <td>713.625</td>\n",
       "      <td>710.805</td>\n",
       "      <td>712.65</td>\n",
       "      <td>10404</td>\n",
       "      <td>712.604</td>\n",
       "      <td>2.0</td>\n",
       "      <td>711.35045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-05-08 15:55:00-04:00</td>\n",
       "      <td>712.210</td>\n",
       "      <td>712.210</td>\n",
       "      <td>709.820</td>\n",
       "      <td>709.82</td>\n",
       "      <td>17592</td>\n",
       "      <td>711.970</td>\n",
       "      <td>2.0</td>\n",
       "      <td>711.35495</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              SHOP                                            \\\n",
       "                              open     high      low   close volume fast_sma   \n",
       "time                                                                           \n",
       "2020-05-07 14:40:00-04:00  727.125  728.365  727.125  728.30    772      NaN   \n",
       "2020-05-07 14:45:00-04:00  728.740  728.740  727.620  727.62   1402      NaN   \n",
       "2020-05-07 14:50:00-04:00  727.920  727.920  727.920  727.92    202      NaN   \n",
       "2020-05-07 14:55:00-04:00  726.285  727.320  726.285  726.77    764      NaN   \n",
       "2020-05-07 15:00:00-04:00  726.705  726.705  724.740  725.48   1048  727.218   \n",
       "...                            ...      ...      ...     ...    ...      ...   \n",
       "2020-05-08 15:35:00-04:00  712.800  712.970  711.190  711.59   4370  712.633   \n",
       "2020-05-08 15:40:00-04:00  711.590  712.460  711.590  712.07   4522  712.591   \n",
       "2020-05-08 15:45:00-04:00  711.810  714.060  711.510  713.72   7490  712.750   \n",
       "2020-05-08 15:50:00-04:00  713.625  713.625  710.805  712.65  10404  712.604   \n",
       "2020-05-08 15:55:00-04:00  712.210  712.210  709.820  709.82  17592  711.970   \n",
       "\n",
       "                                               \n",
       "                          fast_ema   slow_ema  \n",
       "time                                           \n",
       "2020-05-07 14:40:00-04:00      NaN        NaN  \n",
       "2020-05-07 14:45:00-04:00      NaN        NaN  \n",
       "2020-05-07 14:50:00-04:00      NaN        NaN  \n",
       "2020-05-07 14:55:00-04:00      NaN        NaN  \n",
       "2020-05-07 15:00:00-04:00      1.0        NaN  \n",
       "...                            ...        ...  \n",
       "2020-05-08 15:35:00-04:00      2.0  710.67920  \n",
       "2020-05-08 15:40:00-04:00      2.0  710.88570  \n",
       "2020-05-08 15:45:00-04:00      2.0  711.18045  \n",
       "2020-05-08 15:50:00-04:00      2.0  711.35045  \n",
       "2020-05-08 15:55:00-04:00      2.0  711.35495  \n",
       "\n",
       "[100 rows x 8 columns]"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s = 'SHOP'\n",
    "data = api.get_barset(s, '5Min', limit=100).df\n",
    "smoothing_factor = 2/(1+5)\n",
    "\n",
    "data.loc[:, (s, 'fast_sma')] = data[s]['close'].rolling(window=5).mean()\n",
    "#for i in range(len(data)) : \n",
    "data.loc[:4, (s, 'fast_ema')] = None\n",
    "data.loc[4:, (s, 'fast_ema')] = 1\n",
    "data.loc[6:, (s, 'fast_ema')] = 1 + data[s]['fast_ema'][-1]\n",
    "data.loc[:, (s, 'slow_ema')] = data[s]['close'].rolling(window=20).mean()\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = data[s].iloc[20:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x117524810>"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "b.plot(y = ['fast_sma','fast_ema','close', 'slow_ema'], figsize = (10,6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'AAPL': 1}"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signals = {}\n",
    "if data['AAPL'].iloc[-1]['fast_ema'] > data['AAPL'].iloc[-1]['slow_ema']: signal = 1\n",
    "else: signal = 0\n",
    "signals['AAPL'] = signal\n",
    "signals"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
